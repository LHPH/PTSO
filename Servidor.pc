
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <sqlda.h>
#include <sqlcpr.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <malloc.h>

#define MAX_USERNAME     31
#define MAX_SERVICENAME 128
#define LONGITUD 200

EXEC SQL INCLUDE SQLCA.H;

EXEC SQL BEGIN DECLARE SECTION;
        char  user[31];
        char  pass[31];
		char  user2[31];
		char  pass2[31];
        char  svc[128];     /* Datos de Conexion               */

        VARCHAR fecha[30];
		int monto;
		VARCHAR tipo[5];
		
        char msg[30];
        char CveTrans[5],NumTarj[21],NIP[5],NumCuenta[11],NumCuenta2[11],Cant[7],NumCuentaAux[11];
	    int iSaldo, idCuenta,desc;
		int dados[6];//saber cuantos billetes
		int billetes[6];
		char *cuenta;
EXEC SQL END DECLARE SECTION;


/********************************************************
	Prototipos 
**********************************************************/

int errrpt(void);
int ConsSaldo(char *strNumTarj, char *strNIP);
int ConsSaldo2(char *strNumTarj);
char *movimientos(char *strNumCuenta,char *strNIP);
void insertarMov(int id,char *monto, char *strCveTrans);
int getID(char *strNumCuenta,char *strNIP);
int getID2(char *strNumCuenta,char *strNIP);
int getID3(char *strNumTarj);
int getID4(char *strNumCuenta);
void cambiarNIP(char *nuevo,char *strNumCuenta,char *strNIP);
int verificar(char *strNIP,char *strNumTarj);
int retirar(char *strCveTrans,char *strRetiro,char *strNumCuenta,char *strNIP);
int depositar(char *strCveTrans,char *strAbono,char *strNumCuenta,char *strNIP);
char *getNumCuenta(char *strNIP,char *strNumTarj);
char *getNumCuenta2(char *strNumTarj);
void quitarEsp(char *cuenta);
int comprarInternet(char *strCveTrans,char *strRetiro,char *strNumTarj);
int transferencia(char *strCveTrans,char *strNumTarj,char *strNIP,char *strCant,char *strNumCuenta);
char *disposicion(int cant);
void cargarEfectivo();

int cuenta_origen=0; //0 nativa 1 otro
int cuenta_dest=0; //0 nativa 1 otro;
char *param;


int main(int argc, char**argv)
{
   int listenfd,connfd,n, intContTkn;
   int iResp;
   struct sockaddr_in servaddr,cliaddr;
   socklen_t clilen;
   pid_t     childpid;
   char  *token;
   char strCveTrans[5], strNumTarj[21],strNIP[5],strNumCuenta[11];
   char strTipo[5];
   char strCant[7];
   char mesg[256];
   char mesgAux[256];
   char *mesg2;
   char resp[1000];

/* --------------------------------------------------------------------------
   Si existiera algun erro en la conexion o postulados SQL
-------------------------------------------------------------------------- */

   EXEC SQL WHENEVER SQLERROR GOTO errexit;

  /* Asignacion de parametros de conexion a BD Oracle   */

  strncpy((char *) user, "tso", MAX_USERNAME);
  strncpy((char *) svc,  "orcl",  MAX_SERVICENAME);
  strncpy((char *) pass, "tso", MAX_USERNAME);
  
  strncpy((char *) user2, "tso2", MAX_USERNAME);
  strncpy((char *) svc,  "orcl",  MAX_SERVICENAME);
  strncpy((char *) pass2, "tso2", MAX_USERNAME);
  

  //printf("\nConectandose  como %s@%s\n", user, svc);
  /* Instruccion de conexion   Oracle DB. */

   /*EXEC SQL CONNECT :user IDENTIFIED BY :pass USING :svc;
    printf("Conexion establecida\n\n");*/


   listenfd=socket(AF_INET,SOCK_STREAM,0);

   bzero(&servaddr,sizeof(servaddr));
   //Crear estructura
   servaddr.sin_family = AF_INET;
   servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
   servaddr.sin_port=htons(32003);

   //enlazar a puerto   
   bind(listenfd,(struct sockaddr *)&servaddr,sizeof(servaddr));
   //escuchar
   listen(listenfd,1024);

   for(;;)
   {
      clilen=sizeof(cliaddr);
      connfd = accept(listenfd,(struct sockaddr *)&cliaddr,&clilen);
	  if(connfd == -1){
		  break;
	   }
	   printf("Servidor: esperando transaccion\n");
      bzero(mesg,256);
      if ((childpid = fork()) == 0)
      {
         close (listenfd);

         for(;;)
         {
			/*EXEC SQL CONNECT :user IDENTIFIED BY :pass USING :svc;
            printf("Conexion establecida\n\n");*/
	        
			intContTkn=0;
			
            //n = recvfrom(connfd,mesg,1000,0,(struct sockaddr *)&cliaddr,&clilen);
			n = read(connfd,mesg,255);

			if(n==0){
				printf("Cliente desconectado\n");
                fflush(stdout);
				break;
			}
			
			
	        int index=0;
	        int len=strlen(mesg);
			printf("Antes %d\n",len);
			printf("Mensaje %s\n",mesg);
		    for(index=0;index<len;index++){
			    printf("%d %c\n",index,mesg[index]);
			   if(mesg[index]=='\n'){
				    mesg[index]='\0';
				    break;
			    }
		    }      

			strcpy(mesgAux,mesg); 
			 
    	    token = strtok(mesgAux, "|");
            printf("PRIMER TOKEN +%s+\n",token);
	        while( token != NULL ) 
	         {
				switch (intContTkn)	
				{
					case 0:
					   strcpy(strTipo,token);  //para el banco, INT - interno, EXT - externo
					   break;
					case 1:	
						 strcpy(strCveTrans,token);
						break;
					case 2:	
						 strcpy(strNumTarj,token);
						break;
					case 3:	
						 strcpy(strNIP,token);
						break;
					case 4:
						strcpy(strCant,token);
						break;
					case 5:
					    strcpy(strNumCuenta,token);
						break;
					default:
						printf("Caso defaullt\n");
						break;
				} /** fin del switch **/
	    
	            token = strtok(NULL, "|");
			    printf("TOKEN NUEVO +%s+\n",token);
	         	intContTkn++;
	         }
			    //printf("STRTIPO +%s+\n",strTipo);
			   if(strcmp(strTipo,"INT") == 0){
					desc=0;
					EXEC SQL CONNECT :user IDENTIFIED BY :pass USING :svc;
                    printf("Conexion establecida\n");
					printf("Conectandose  como %s@%s\n", user, svc);
					cuenta_origen=0;
			   }
			   else{
				    desc=20;
				    EXEC SQL CONNECT :user2 IDENTIFIED BY :pass2 USING :svc;
                    printf("Conexion establecida\n");
					printf("Conectandose  como %s@%s\n", user2, svc);
					cuenta_origen=1;
			   }
			   
	       
			   if(strcmp(strCveTrans,"CONS") == 0){
					 iResp = ConsSaldo(strNumTarj, strNIP);
					 quitarEsp(cuenta);
					 sprintf(resp,"%s|%d",cuenta, iResp);
			   }
			   
			   if(strcmp(strCveTrans,"DEP") == 0){ 
				  iResp=depositar(strCveTrans,strCant,strNumTarj,strNIP);
				  quitarEsp(cuenta);
				  sprintf(resp,"%s|%d",cuenta,iResp);
			   }
			   
			   if(strcmp(strCveTrans,"RET") == 0 || strcmp(strCveTrans,"REC")==0 ){
				  iResp=retirar(strCveTrans,strCant,strNumTarj,strNIP); 
                  if(iResp!=-1 && iResp!=-2){
					  quitarEsp(cuenta);
				      sprintf(resp,"%s|%d",cuenta,iResp);
					  strcat(resp,param);
				  }
                  else{
					  sprintf(resp,"%d",iResp);
				  }				  
				  
			   }
			   
			   if(strcmp(strCveTrans,"CIT") == 0 || strcmp(strCveTrans,"PCC")==0 ){
				  iResp=comprarInternet(strCveTrans,strCant,strNumTarj); 
                  sprintf(resp,"%d",iResp);		  
			   }
			   
			   if(strcmp(strCveTrans,"MOV") == 0){
					 char *mov=movimientos(strNumTarj,strNIP);
					 quitarEsp(mov);
					 sprintf(resp,"%s",mov);
			   }
			   
			   if(strcmp(strCveTrans,"NIP") == 0){
				   //cambiarNIP(strCant,strNumTarj,strNIP);
				   //sprintf(mesg,"%s|%s|%s", strCveTrans, strNumTarj,strCant);
			   }
			   
			   if(strcmp(strCveTrans,"VER") == 0){
				   iResp=verificar(strNIP,strNumTarj);
				   sprintf(resp,"%d",iResp);
			   }
			   
			   if(strcmp(strCveTrans,"TRA") == 0){
				     iResp=transferencia(strCveTrans,strNumTarj,strNIP,strCant,strNumCuenta);
					 if(iResp!=-2 && iResp!=-1){
						 quitarEsp(cuenta);
						 //printf("TRA CUENTA +%s+",cuenta);
			             sprintf(resp,"%s|%s|%d",cuenta,strNumCuenta,iResp);
					 }
					 else{
						 sprintf(resp,"%d",iResp);
					 }
			   }
	        
			//bzero(mesg,1000);
          //sendto(connfd,mesg,len,0,(struct sockaddr *)&cliaddr,sizeof(cliaddr));
		  
		    index=0;
	        len=strlen(resp);
		    for(index=0;index<len;index++){
			  // printf("%d %c\n",index,resp[index]);
			   if(resp[index]=='\n'){
				    resp[index]='\0';
				    break;
			    }
		    }   
		  
		  
			write(connfd,resp,strlen(resp));
            printf("---------------------------------------------\n");
            //mesg[n] = 0;
            printf("TransacciÃ²n Solicitada :\n");
		    printf("%s\n",mesg);
			printf("Respuesta:\n");
			printf("%s\n",resp);
            printf("---------------------------------------------\n");
			bzero(mesg,256);
         } //fin for
         
      } 
      close(connfd);
   } /** fin del for **/

EXEC SQL COMMIT WORK RELEASE;
errexit:
   errrpt();
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   return 1;

} /** fin del main **/



/* -----------------------------------------------------------
int errrpt()

   Rutina para manejo de errores oracle
----------------------------------------------------------- */

int errrpt( void )
   {
   printf("%s (%d)\n", sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
   return(0);
   }

   
void quitarEsp(char *cuenta){
	
    char *i = cuenta;
    char *j = cuenta;
    while(*j!=0){
		*i = *j++;
		if(*i != ' '){
			i++;
		}
	}
    *i=0;	
}

//0 falso 1 verdadero 2 otro banco
int verificar(char *strNIP,char *strNumTarj){
	strcpy(NumTarj,strNumTarj);
	strcpy(NIP,strNIP);
	int id=getID(strNumTarj,strNIP);
	if(id!=0){
		return 1;
	}
	else{
		id=getID2(strNumTarj,strNIP);
		if(id!=0){
			return 2;
		}
		else{
			return 0;
		}
	}
}  
   
/* -----------------------------------------------------------
   ConsSaldo

   Rutina para Consultar el saldo
----------------------------------------------------------- */

int ConsSaldo(char *strNumTarj, char *strNIP){
	strcpy(NumTarj,strNumTarj);
	strcpy(NIP,strNIP);
	EXEC SQL SELECT b.saldo 
              INTO :iSaldo
              FROM TARJETAS a,CUENTAS b
	WHERE  a.id_cuenta=b.id_cuenta AND  a.num_tar=:NumTarj;
	cuenta=getNumCuenta(strNIP,strNumTarj);
	return iSaldo;

} /** fin de consulta de saldo **/

int ConsSaldo2(char *strNumTarj){
	strcpy(NumTarj,strNumTarj);
	EXEC SQL SELECT b.saldo 
              INTO :iSaldo
              FROM TARJETAS a,CUENTAS b
	WHERE  a.id_cuenta=b.id_cuenta AND  a.num_tar=:NumTarj;
	//cuenta=getNumCuenta(strNIP,strNumTarj);
	return iSaldo;

} /** fin de consulta de saldo **/



//0 false  1 verdadero 2 INT-EXT 3 EXT-INT
int verificarCuenta(char *strNumCuenta){
	strcpy(NumCuenta2,strNumCuenta);
	EXEC SQL SELECT ID_CUENTA INTO :idCuenta FROM CUENTAS WHERE NUM_CTA =:NumCuenta2;
	if(idCuenta!=0){
		return 1;
	}
	else{
		
		if(cuenta_origen==0){
			EXEC SQL SELECT ID_CUENTA INTO :idCuenta FROM tso2.CUENTAS WHERE NUM_CTA =:NumCuenta2;
		}
		else{
			EXEC SQL SELECT ID_CUENTA INTO :idCuenta FROM tso.CUENTAS WHERE NUM_CTA =:NumCuenta2;
		}
		
		if(idCuenta!=0){
			if(cuenta_origen==0){
				 return 2;
			}
			else{
				return 3;
			}
		}
		else{
			return 0;
	    }
	}
}


/*------------------------------------------- 
Procedimiento para transferir entre cuentas*/
int transferencia(char *strCveTrans,char *strNumTarj,char *strNIP,char *strCant,char *strNumCuenta){
	strcpy(NumTarj,strNumTarj);
	strcpy(NIP,strNIP);
	strcpy(Cant,strCant);
	strcpy(NumCuenta2,strNumCuenta);
	
	int cantidad = atoi(Cant);
	int saldo = ConsSaldo(strNumTarj,strNIP);
	if(saldo>=cantidad){
		int existe = verificarCuenta(NumCuenta2);
		printf("EXISTE %d\n",existe);
		if(existe==1){
			cuenta=getNumCuenta(strNIP,strNumTarj);
	        quitarEsp(cuenta);
			//printf("Trans +%s+\n",cuenta);
	        EXEC SQL UPDATE CUENTAS SET SALDO=SALDO-TO_NUMBER(:Cant) WHERE NUM_CTA=:cuenta;
			EXEC SQL COMMIT;
			EXEC SQL UPDATE CUENTAS SET SALDO=SALDO+TO_NUMBER(:Cant) WHERE NUM_CTA=:NumCuenta2;
	        EXEC SQL COMMIT;
			int id=getID(strNumTarj,strNIP);
	        insertarMov(id,strCant,strCveTrans);
			cuenta=getNumCuenta(strNIP,strNumTarj);
			id=getID4(NumCuenta2);
			insertarMov(id,strCant,"DEP");
			//printf("TRACUENTA +%s+",cuenta);
			return (saldo-cantidad);
		}
		else{
			
			if(existe==2){
			   //otro banco INT-EXT
			        cuenta=getNumCuenta(strNIP,strNumTarj);
					quitarEsp(cuenta);
					//printf("Trans +%s+\n",cuenta);
					EXEC SQL UPDATE CUENTAS SET SALDO=SALDO-TO_NUMBER(:Cant)-20 WHERE NUM_CTA=:cuenta;
					EXEC SQL COMMIT;
					
					int id=getID(strNumTarj,strNIP);
					insertarMov(id,strCant,strCveTrans);
					cuenta=getNumCuenta(strNIP,strNumTarj);
					
					EXEC SQL CONNECT :user2 IDENTIFIED BY :pass2 USING :svc;
					EXEC SQL UPDATE CUENTAS SET SALDO=SALDO+TO_NUMBER(:Cant) WHERE NUM_CTA=:NumCuenta2;
					EXEC SQL COMMIT;
					id=getID4(NumCuenta2);
					insertarMov(id,strCant,"DEP");
					
					//printf("TRACUENTA +%s+",cuenta);
					return (saldo-cantidad-20);
               			   
			}
			else{
				if(existe==3){
					//otro banco EXT-INT
					cuenta=getNumCuenta(strNIP,strNumTarj);
					quitarEsp(cuenta);
					//printf("Trans +%s+\n",cuenta);
					EXEC SQL UPDATE CUENTAS SET SALDO=SALDO-TO_NUMBER(:Cant)-20 WHERE NUM_CTA=:cuenta;
					EXEC SQL COMMIT;
					
					int id=getID(strNumTarj,strNIP);
					insertarMov(id,strCant,strCveTrans);
					cuenta=getNumCuenta(strNIP,strNumTarj);
					
					printf("**************Nuevo +%s+  +%s+\n",Cant,NumCuenta2);
					EXEC SQL CONNECT :user IDENTIFIED BY :pass USING :svc;
					EXEC SQL UPDATE CUENTAS SET SALDO=SALDO+TO_NUMBER(:Cant) WHERE NUM_CTA=:NumCuenta2;
					printf("%s (%d)\n", sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
					EXEC SQL COMMIT;
					id=getID4(NumCuenta2);
					insertarMov(id,strCant,"DEP");
					
					//printf("TRACUENTA +%s+",cuenta);
					return (saldo-cantidad-20);
				}
				else{
				   //si no existe la cuenta;
			       return -2;	
				}
			}
		}
	}
	else{
		//si no posee el saldo suficiente
		return -1;
	}
	
}

/*--------------------------------------------------
Procedimiento para abonar en la cuenta
*/

int depositar(char *strCveTrans,char *strCant,char *strNumTarj,char *strNIP){
	strcpy(Cant,strCant);
	strcpy(NumTarj,strNumTarj);
	cuenta=getNumCuenta(strNIP,strNumTarj);
	quitarEsp(cuenta);
	EXEC SQL UPDATE CUENTAS SET SALDO=SALDO+TO_NUMBER(:Cant)-:desc WHERE NUM_CTA=:cuenta;
	EXEC SQL COMMIT;
	int saldo=ConsSaldo(strNumTarj,strNIP);
	int id=getID(strNumTarj,strNIP);
	insertarMov(id,strCant,strCveTrans);
	return saldo;
}

/* Procedimiento para obtener el numero de cuenta
*/

char *getNumCuenta(char *strNIP,char *strNumTarj){
	strcpy(NIP,strNIP);
	strcpy(NumTarj,strNumTarj);
	
	EXEC SQL SELECT a.NUM_CTA into :NumCuenta FROM CUENTAS a,TARJETAS b WHERE
	b.NIP=:NIP AND b.NUM_TAR=:NumTarj AND a.ID_CUENTA=b.ID_CUENTA;
	
	printf("Cuenta %s\n",NumCuenta);
	return NumCuenta;
	
}

char *getNumCuenta2(char *strNumTarj){
	strcpy(NumTarj,strNumTarj);
	
	EXEC SQL SELECT a.NUM_CTA into :NumCuenta FROM CUENTAS a,TARJETAS b WHERE
	b.NUM_TAR=:NumTarj AND a.ID_CUENTA=b.ID_CUENTA;
	
	printf("Cuenta %s\n",NumCuenta);
	return NumCuenta;
	
}

/*--------------------------------------------------
Procedimiento para retirar en la cuenta
*/

int retirar(char *strCveTrans,char *strRetiro,char *strNumTarj,char *strNIP){
	strcpy(CveTrans,strCveTrans);
	strcpy(Cant,strRetiro);
	strcpy(NumTarj,strNumTarj);
	
	int sal=ConsSaldo(strNumTarj,strNIP);
	int cantidad = atoi(Cant);
	if(sal>=cantidad){
		
		if(strcmp(strCveTrans,"REC")==0){
			int id=getID(strNumTarj,strNIP);
	
		    cuenta=getNumCuenta(strNIP,strNumTarj);
		    quitarEsp(cuenta);
		    EXEC SQL UPDATE CUENTAS SET SALDO=SALDO-TO_NUMBER(:Cant)-:desc WHERE NUM_CTA=:cuenta;
		    EXEC SQL COMMIT;
		
		    insertarMov(id,strRetiro,strCveTrans);
		    int saldo=ConsSaldo(strNumTarj,strNIP);
			return saldo;
		}
		else{
			cargarEfectivo();
		    param=disposicion(cantidad);
		    if(strcmp(param,"-2")!=0){
			      int id=getID(strNumTarj,strNIP);
	
		          cuenta=getNumCuenta2(strNumTarj);
		          quitarEsp(cuenta);
		          EXEC SQL UPDATE CUENTAS SET SALDO=SALDO-TO_NUMBER(:Cant)-:desc WHERE NUM_CTA=:cuenta;
		          EXEC SQL COMMIT;
		
		          insertarMov(id,strRetiro,strCveTrans);
		          int saldo=ConsSaldo(strNumTarj,strNIP);
			      return saldo;
	     	}
		    else{
		       return -2;	
		    }
			
		}
		
		
	}
	else{
		return -1;
	}
}

// -1 no hay saldo suficiente
// -2 no existe la tarjeta
int comprarInternet(char *strCveTrans,char *strRetiro,char *strNumTarj){
	strcpy(CveTrans,strCveTrans);
	strcpy(Cant,strRetiro);
	strcpy(NumTarj,strNumTarj);
	
	int sal=ConsSaldo2(strNumTarj);
	int cantidad = atoi(Cant);
	if(sal>=cantidad){
			int id=getID3(strNumTarj);
	
		    cuenta=getNumCuenta2(strNumTarj);
		    quitarEsp(cuenta);
		    EXEC SQL UPDATE CUENTAS SET SALDO=SALDO-TO_NUMBER(:Cant) WHERE NUM_CTA=:cuenta;
		    EXEC SQL COMMIT;
		
		    insertarMov(id,strRetiro,strCveTrans);
		    int saldo=ConsSaldo2(strNumTarj);
			return saldo;
	}
	else{
		return -1;
	}
}

void cambiarNIP(char *nuevo,char *strNumCuenta,char *strNIP){
	
	strcpy(NIP,nuevo);
	strcpy(NumCuenta,strNumCuenta);
	
	EXEC SQL UPDATE TARJETAS SET NIP=TO_NUMBER(:NIP) WHERE NUM_CTA=:NumCuenta;
	
	EXEC SQL COMMIT;
}

int getID(char *strNumTarj,char *strNIP){
	strcpy(NumTarj,strNumTarj);
	strcpy(NIP,strNIP);
	
	printf("Lon %s NumTarj %d\n",NumTarj,strlen(NumTarj));
	printf("Lon %s NIP %d\n",NIP,strlen(NIP));
	
	EXEC SQL SELECT a.id_cuenta 
              INTO :idCuenta
              FROM TARJETAS a,CUENTAS b
	WHERE  a.id_cuenta=b.id_cuenta AND  a.num_tar=:NumTarj AND a.NIP=:NIP;
     printf("%s (%d)\n", sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
	return idCuenta;
}

int getID2(char *strNumTarj,char *strNIP){
	strcpy(NumTarj,strNumTarj);
	strcpy(NIP,strNIP);
	
	//printf("Lon %s NumTarj %d\n",NumTarj,strlen(NumTarj));
	//printf("Lon %s NIP %d\n",NIP,strlen(NIP));
	
	EXEC SQL SELECT a.id_cuenta 
              INTO :idCuenta
              FROM tso2.TARJETAS a,tso2.CUENTAS b
	WHERE  a.id_cuenta=b.id_cuenta AND  a.num_tar=:NumTarj AND a.NIP=:NIP;
     //printf("%s (%d)\n", sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
	return idCuenta;
}

int getID3(char *strNumTarj){
	strcpy(NumTarj,strNumTarj);
	//printf("Lon %s NumTarj %d\n",NumTarj,strlen(NumTarj));
	//printf("Lon %s NIP %d\n",NIP,strlen(NIP));
	EXEC SQL SELECT a.id_cuenta 
              INTO :idCuenta
              FROM TARJETAS a,CUENTAS b
	WHERE  a.id_cuenta=b.id_cuenta AND  a.num_tar=:NumTarj;
     //printf("%s (%d)\n", sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
	return idCuenta;
}

int getID4(char *strNumCuenta){
	strcpy(NumCuentaAux,strNumCuenta);
	EXEC SQL SELECT b.id_cuenta 
              INTO :idCuenta
              FROM CUENTAS b
	WHERE  b.num_cta=:NumCuentaAux;
     
	return idCuenta;
}

char * disposicion(int cant){ //100
    int b=0;
    int b2=0;
    char buff[100];
	char *resp=malloc(128);
	printf("sssssssssssssssssssssss\n");
   for(;;){
      if(billetes[0]>0){
         if((20*2<=cant || cant==20) && cant!=50){
            billetes[0]=billetes[0]-1;
            cant=cant-20;
            dados[0]=dados[0]+1;
            b++;
         }
      }
      if(billetes[1]>0){
        if(50*2<=cant || cant==50){
            billetes[1]=billetes[1]-1;
            cant=cant-50;
            dados[1]=dados[1]+1;
            b++;
        }
      }
      if(billetes[2]>0){
        if(100*2<=cant || cant==100){
            billetes[2]=billetes[2]-1;
            cant=cant-100;
            dados[2]=dados[2]+1;
            b++;
        }
      }
      if(billetes[3]>0){
        if((200*2<=cant || cant==200) && cant!=500){
            billetes[3]=billetes[3]-1;
            cant=cant-200;
            dados[3]=dados[3]+1;
            b++;
        }
      }
      if(billetes[4]>0){
        if(500<=cant || cant==500){
            billetes[4]=billetes[4]-1;
            cant=cant-500;
            dados[4]=dados[4]+1;
            b++;
        }
      }
      if(billetes[5]>0){
        if(1000<=cant || cant==1000){
            billetes[5]=billetes[5]-1;
            cant=cant-1000;
            dados[5]=dados[5]+1;
            b++;
        }
      }

      if(b==0){
        b2++;
      }
      if(b>0){
          b=0;
      }

      if(cant==0 || b2==3){
          break;
      }
   }
    printf("11111111111111111111111111\n");
   if(b2==3){
          printf("No hay suficiente efectivo para realizar el retiro\n");
          sprintf(buff,"%d",-2);
		  strcat(resp,buff);
    }
    else{
        sprintf(buff,"|%d|%d|%d|%d|%d|%d",dados[0],dados[1],dados[2],dados[3],dados[4],dados[5]);
		strcat(resp,buff);
		
       /* printf("Billetes 20 cantidad %d\n",dados[0]);
        printf("Billetes 50 cantidad %d\n",dados[1]);
        printf("Billetes 100 cantidad %d\n",dados[2]);
        printf("Billetes 200 cantidad %d\n",dados[3]);
        printf("Billetes 500 cantidad %d\n",dados[4]);
        printf("Billetes 1000 cantidad %d\n",dados[5]);*/
		
        EXEC SQL UPDATE DISPOSICION SET CANTIDAD=:billetes[0] WHERE DENOMINACION='20';
		EXEC SQL COMMIT;
        EXEC SQL UPDATE DISPOSICION SET CANTIDAD=:billetes[1] WHERE DENOMINACION='50';
		EXEC SQL COMMIT;
        EXEC SQL UPDATE DISPOSICION SET CANTIDAD=:billetes[2] WHERE DENOMINACION='100';
		EXEC SQL COMMIT;
        EXEC SQL UPDATE DISPOSICION SET CANTIDAD=:billetes[3] WHERE DENOMINACION='200';
		EXEC SQL COMMIT;
        EXEC SQL UPDATE DISPOSICION SET CANTIDAD=:billetes[4] WHERE DENOMINACION='500';
		EXEC SQL COMMIT;
        EXEC SQL UPDATE DISPOSICION SET CANTIDAD=:billetes[5] WHERE DENOMINACION='1000';
        EXEC SQL COMMIT;
		printf("BILLETES %s\n",resp);
		dados[0]=0;
		dados[1]=0;
		dados[2]=0;
		dados[3]=0;
		dados[4]=0;
		dados[5]=0;
		
    }


   return resp;
}

void insertarMov(int id,char *monto, char *strCveTrans){
	strcpy(CveTrans,strCveTrans);
	strcpy(Cant,monto);
	idCuenta=id;
	//printf("%d  %s   %s\n",idCuenta,Cant,CveTrans);
	EXEC SQL INSERT INTO MOVIMIENTOS VALUES(:idCuenta,TO_NUMBER(:Cant),:CveTrans,SYSDATE);
	EXEC SQL COMMIT;
	printf("Movimiento Registrado\n");
}

/*--------------------------------------------------
Procedimiento para mostrar movimientos
*/
char * movimientos(char *strNumTarj,char *strNIP){
		char *mesg=malloc(512);
     	strcpy(NumTarj,strNumTarj);
		cuenta=getNumCuenta(strNIP,strNumTarj);
		quitarEsp(cuenta);
        
        //NumTarj[21]='\0';	
	EXEC SQL DECLARE cursor_mov CURSOR FOR 
	     SELECT MONTO,TIPO,TO_CHAR(FECHA)/*,TO_CHAR(FECHA,'dd-mm-yyyy hh24:mi:ss') */
	     FROM MOVIMIENTOS WHERE ID_CUENTA=(SELECT ID_CUENTA FROM CUENTAS WHERE NUM_CTA=:cuenta) ORDER BY FECHA DESC;
             //printf("%s ||%.70s (%d)\n",NumCuenta, sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
				
	 EXEC SQL OPEN cursor_mov;
     
    EXEC SQL WHENEVER NOT FOUND DO break;
	//strcpy(mesg,"Movimientos\n");
	char buff[100];
    printf("Empezando extraccion de datos\n");
	int numero=0;
	for(;;){
		//printf("Ciclo\n");
		
		if(numero==10){
			break;
		}
		
		EXEC SQL FETCH cursor_mov
		INTO :monto, :tipo, :fecha;
                
       // printf("%.70s (%d)\n", sqlca.sqlerrm.sqlerrmc, -sqlca.sqlcode);
		if(sqlca.sqlcode!=0){
                 printf("Fin de cursor");
                 break;
        }
		//printf("%d|%s|%s\n",monto,tipo.arr,fecha.arr);
		sprintf(buff,"%d|%s|%s",monto,tipo.arr,fecha.arr);
		//printf("%s\n",buff);
		strcat(mesg,"[");
		strcat(mesg,buff);
		strcat(mesg,"]");
		numero++;
	}
	printf("mesg +%s+\n",mesg);
	EXEC SQL CLOSE cursor_mov;
	return mesg;
}

void cargarEfectivo(){
	EXEC SQL DECLARE cursor_efec CURSOR FOR SELECT CANTIDAD FROM DISPOSICION;			
	EXEC SQL OPEN cursor_efec;
    EXEC SQL WHENEVER NOT FOUND DO break;
	int i=0;
	for(;;){		
		EXEC SQL FETCH cursor_efec
		INTO :billetes[i];
		i++;
		if(sqlca.sqlcode!=0){
                 printf("Fin de cursor");
                 break;
        }
		if(i==6){
			break;
		}
	}
	EXEC SQL CLOSE cursor_efec;
}

